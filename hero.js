/*

  Hello, I am big

  This file was autogenerated using ./build/gulpfile.js
  
  See: ./big/ folder for actual source code

*/
var big = {};
big.directives = [];
big.use = function (directive, fn) {
  big.directives[directive] = fn;
  return this;
};
big.move = function (gameData, helpers){
  big.helpers = helpers;
  var direction;
  Object.keys(big.directives).forEach(function(directive){
    if (direction) {
      return direction;
    }
    direction = big.directives[directive](gameData, helpers);
  });
  if (typeof direction === "undefined") {
    // if all else fails, go north my son
    direction = "North";
  }
  return direction;
};
//
// Kill heavily damaged enemy if right next to it
//
function assassinate (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;

  if (myHero.health >= 60) {
    // TODO: finishing blow logic / keep going if enemy is one hit away
    var tile = findNearestWeakerEnemyTile(gameData);

    if (tile) {
      //console.log(tile.distance);
      if(tile.distance <= 2) {
        direction = tile.direction;
        return direction;
      }
    }
  }
}

//
// TODO: If passing by a grave and not that damaged, take the grave
//
function avoidDanger (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
  console.log(myZone(gameData))
}
//
// If health is 90 or less, find a damaged friend
//
function buddyUp (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;

  if (myHero.health <= 90) {

    var friend = nearestTile(gameData, {
      type: "Hero",
      team: myHero.team,
      health: {
        op: "LTE",
        val: 90
      }
    });

    var well = nearestTile(gameData, {
      type: "HealthWell"
    });

    if (friend) {
      return friend.direction;
    } else {
      return well.direction || "North";
    }

  }
}
/*
  //
  // 5. Pick Pocket
  //Pick pocket - If nearest well and nearest enemy mine are both 1 distance away,
  //steal from enemy mine
  if (myHero.health === 100) {
    var well = findNearestHealthWellTile(gameData);
    var enemyMine = findNearestEnemyMineTile(gameData);
    
    if (well && enemyMine) {
      if (well.distance === 1 && enemyMine.distance === 1) {
        direction = enemyMine.direction;
        return finish();
      }
    }
  }

  //Sprint
  // If nearest weakest enemy is much farther away then nearest enemy,
  // attack the nearest enemy
  if (myHero.health === 100) {
    var weakEnemy = findNearestWeakerEnemyTile(gameData);
    var nearEnemy = 
    direction = helpers.findNearestWeakerEnemy(gameData);
    if (!direction) {
      direction = findNearestEnemyTile(gameData).direction || "North";
    }
    return finish();
  }
  
  */
//
// If passing by a grave and not that damaged, take the grave
//
function graveRobber (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
  
  var grave = nearestTile(gameData, {
    subType: "Bones",
  });
  
  if (grave) {
    if (grave.distance === 1) {
      return grave.direction;
    }
  }
}
//
// If health is above 80 but below 100 and we are passing by a well,
// move in the direction of that well to heal
//
function greedHeal (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
   if(myHero.health < 100) {
     var well = findNearestHealthWellTile(gameData);
     var well = nearestTile(gameData, {
       type: "HealthWell"
     });
     if (well) {
       if (well.distance === 1) {
         return well.direction;
       }
     }
   }
}
//
// If hero is at full health and passing by a damaged friend,
// heal that friend
//
function highFive (gameData, helpers) {
  var myHero = gameData.activeHero;
  if(myHero.health === 100) {
    var friend = nearestTile(gameData, {
      type: "Hero",
      team: myHero.team,
      health: {
        op: "LTE",
        val: 90
      }
    });
    if (friend) {
      if (friend.distance === 1) {
        return friend.direction;
      }
    }
  }
};

//
// Attack nearest damaged enemies
// If no enemies are damaged, go start a fight
//
function pickFight (gameData, helpers) {
 var direction;
 var myHero = gameData.activeHero;

  if (myHero.health === 100) {
    var damagedEnemy = nearestTile(gameData, {
      type: "Hero",
      team: {
        op: "NEQ",
        val: myHero.team
      },
      health: {
        op: "LTE",
        val: 40
      }
    });
    if (!damagedEnemy) {
      var enemy = nearestTile(gameData, {
        type: "Hero",
        team: {
          op: "NEQ",
          val: myHero.team
        }
      })
      return enemy.direction;
    } else {
      return damagedEnemy.direction;
    }
  }
}
//
// Heal if under 80 health
//
function recover (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
  if (myHero.health < 80) {
    direction = helpers.findNearestHealthWell(gameData);
    return direction;
  }
}

//
// If health is above 80 but below 100 and we are passing by a well,
// move in the direction of that well to heal
//
function greedHeal (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
   if(myHero.health < 100) {
     var well = findNearestHealthWellTile(gameData);
     var well = nearestTile(gameData, {
       type: "HealthWell"
     });
     if (well) {
       if (well.distance === 1) {
         return well.direction;
       }
     }
   }
}
//
// If not at full health and a well is within 2 blocks, move towards it
//
function wellAffinity (gameData, helpers) {
  var direction;
  var myHero = gameData.activeHero;
   var well = nearestTile(gameData, {
     type: "HealthWell"
   });
   if (myHero.health < 100) {
     if (well) {
       if (well.distance === 2) {
         return well.direction;
       }
     }
   }
}
var myZone = function (gameData) {
  
  var myZone = "uuu\
                uHu\
                uuu";
  console.log('ZONE', myZone)
};

var nearestTile = function (gameData, query) {
  query = query || {};

  var board = gameData.board;
  var hero = gameData.activeHero;

  //Get the path info object
  var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(tile) {
    var found = true;
    for (var p in query) {
      var statement = query[p];
      // check searching until found is false
      // once found is false, that search parameter has failed
      // if none of the search parameters fail, this tile matches the query
      if (found) {
        if (typeof statement === "string" || typeof statement === "number") {
          found = statement === tile[p];
          // console.log('PERFORMING string query', statement, p, tile[p], found)
        } else {
          var op = statement.op,
              val = statement.val;
            switch(op) {
              case 'NEQ':
                found = tile[p] !== val;
              break;
              case 'EQ':
                found = tile[p] !== val;
              break;
              case 'GT':
                found = tile[p] > val;
              break;
              case 'GTE':
                found = tile[p] >= val ;
              break;
              case 'LT':
                found = tile[p] < val;
              break;
              case 'LTE':
                found = tile[p] <= val;
              break;
            }
            //console.log('PERFORMING obj query', statement, tile[p], found)
        }
      }
    }
    return found;
  });
  return pathInfoObject;
};

var findNearestTeamMemberDamagedTile = function(gameData) {
  var hero = gameData.activeHero;
  var board = gameData.board;

  //Get the path info object
  var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(heroTile) {
    //console.log(heroTile.health)
    return heroTile.type === 'Hero' && heroTile.team === hero.team && heroTile.health < 90;
  });

  //Return the direction that needs to be taken to achieve the goal
  return pathInfoObject;
};

 // Returns the nearest health well or false, if there are no health wells
 var findNearestHealthWellTile = function(gameData) {
   var hero = gameData.activeHero;
   var board = gameData.board;

   //Get the path info object
   var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(healthWellTile) {
     return healthWellTile.type === 'HealthWell';
   });

   //Return the direction that needs to be taken to achieve the goal
   return pathInfoObject;
 };
 
 // Returns the nearest health well or false, if there are no health wells
 var findNearestEnemyMineTile = function(gameData) {
   var hero = gameData.activeHero;
   var board = gameData.board;

   //Get the path info object
   var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(healthWellTile) {
     return mineTile.type === 'DiamondMine' && ineTile.owner.team !== hero.team;
   });

   //Return the direction that needs to be taken to achieve the goal
   return pathInfoObject;
 };
 
 
 var findNearestWeakerEnemyTile = function(gameData) {
   var hero = gameData.activeHero;
   var board = gameData.board;

   //Get the path info object
   var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(enemyTile) {
     return enemyTile.type === 'Hero' && enemyTile.team !== hero.team && enemyTile.health <= 40;
   });

   //Return the direction that needs to be taken to achieve the goal
   //If no weaker enemy exists, will simply return undefined, which will
   //be interpreted as "Stay" by the game object
   return pathInfoObject;
 };

 var findNearestEnemyTile = function(gameData) {
   var hero = gameData.activeHero;
   var board = gameData.board;

   //Get the path info object
   var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(enemyTile) {
     return enemyTile.type === 'Hero' && enemyTile.team !== hero.team;
   });

   //Return the direction that needs to be taken to achieve the goal
   //If no weaker enemy exists, will simply return undefined, which will
   //be interpreted as "Stay" by the game object
   return pathInfoObject;
 };


 var findNearestEnemyTileFullHealth = function(gameData) {
   var hero = gameData.activeHero;
   var board = gameData.board;

   //Get the path info object
   var pathInfoObject = big.helpers.findNearestObjectDirectionAndDistance(board, hero, function(enemyTile) {
     return enemyTile.type === 'Hero' && enemyTile.team !== hero.team && enemyTile.health === 100;
   });

   //Return the direction that needs to be taken to achieve the goal
   //If no weaker enemy exists, will simply return undefined, which will
   //be interpreted as "Stay" by the game object
   return pathInfoObject;
 };

big
 .use('Recover', recover)
 .use('Grave Robber', graveRobber)
 .use('Greedy Heal', greedHeal)
 .use('High Five!', highFive)
 .use('Assassinate', assassinate)
 .use('Well Affinity', wellAffinity)
 .use('Pick a Fight', pickFight)
 .use('Buddy Up', buddyUp);
 
var move = function (gameData, helpers) {
 return big.move(gameData, helpers);
}
module.exports = move;